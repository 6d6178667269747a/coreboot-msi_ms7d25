services:
  - docker:dind

variables:
  RELEASE_DIR: ${CI_PROJECT_DIR}

stages:
  - check_dependencies
  - build_rom
  - test_rom
  - sign_rom
  - publish_rom

check_dependencies:
  stage: check_dependencies
  script:
    - git ls-remote https://github.com/pcengines/coreboot.git | grep ${CI_COMMIT_REF_NAME}
  only:
    - tags 
      
.build_rom_apu: &build_rom_apu
  image: coreboot/coreboot-sdk:1.50
  variables:
    PLATFORM: apux
  stage: build_rom
  tags: 
    - docker
  script:
    - git clone https://github.com/pcengines/pce-fw-builder.git /home/coreboot/pce-fw-builder
    - cd /home/coreboot/pce-fw-builder
    - git checkout `git describe --tags --abbrev=0`
    - ./build.sh release-CI "${CI_COMMIT_REF_NAME}" "${PLATFORM}"
    - cp -v /home/coreboot/release/${PLATFORM}_* ${RELEASE_DIR}
    - ls -al ${RELEASE_DIR}
  artifacts:
    name: ${PLATFORM}
    paths:
      - ${RELEASE_DIR}/${PLATFORM}_*
  only:
    - tags
    - web

.test_rom: &test_rom
  variables:
    PLATFORM: 
  stage: test_rom
  tags:
    - docker
  script:
    - echo "test_rom"
    - ls -la ${RELEASE_DIR}/${PLATFORM}_*.rom
  only:
    - tags

.sign_rom: &sign_rom
  variables:
    PLATFORM: 
  stage: sign_rom
  tags:
    - docker
  script:
    - echo "sign_rom"
    - for rom in ${RELEASE_DIR}/${PLATFORM}_*.rom; do touch ${rom}_dummy_signature; done
    - ls -la ${RELEASE_DIR}/${PLATFORM}_*.rom
  artifacts:
    name: ${PLATFORM}
    paths:
      - ${RELEASE_DIR}/${PLATFORM}_*
  only:
    - tags

.publish_rom: &publish_rom
  variables:
    PLATFORM:
  stage: publish_rom
  tags:
    - docker
  script:
    - ls -al ${RELEASE_DIR}
    - echo "curl -u ${UPLOADER_USERNAME}:${UPLOADER_PASSWORD} -X MKCOL ${UPLOADER_URL}/${PLATFORM}/; curl -u ${UPLOADER_USERNAME}:${UPLOADER_PASSWORD} -X MKCOL ${UPLOADER_URL}/${PLATFORM}/releases/"
    - curl -u ${UPLOADER_USERNAME}:${UPLOADER_PASSWORD} -X MKCOL "${UPLOADER_URL}/${PLATFORM}/"; curl -u ${UPLOADER_USERNAME}:${UPLOADER_PASSWORD} -X MKCOL "${UPLOADER_URL}/${PLATFORM}/releases/"
    - echo "for file in ${RELEASE_DIR}/${PLATFORM}_*.tar.gz; do curl --fail -u ${UPLOADER_USERNAME}:${UPLOADER_PASSWORD} -T ${file} ${UPLOADER_URL}/${PLATFORM}/releases/; done"
    - for file in ${RELEASE_DIR}/${PLATFORM}_*.tar.gz; do curl --fail -u ${UPLOADER_USERNAME}:${UPLOADER_PASSWORD} -T ${file} "${UPLOADER_URL}/${PLATFORM}/releases/"; done
  only:
    - tags


build:apu1:
  <<: *build_rom_apu
  variables:
    PLATFORM: apu1

.test:apu1:
  <<: *test_rom
  variables:
    PLATFORM: apu1

.sign:apu1:
  <<: *sign_rom
  variables:
    PLATFORM: apu1

publish:apu1:
  <<: *publish_rom
  variables:
    PLATFORM: apu1


build:apu2:
  <<: *build_rom_apu
  variables:
    PLATFORM: apu2

.test:apu2:
  <<: *test_rom
  variables:
    PLATFORM: apu2
    
.sign:apu2:
  <<: *sign_rom
  variables:
    PLATFORM: apu2
    
publish:apu2:
  <<: *publish_rom
  variables:
    PLATFORM: apu2    
    
    
build:apu3:
  <<: *build_rom_apu
  variables:
    PLATFORM: apu3

.test:apu3:
  <<: *test_rom
  variables:
    PLATFORM: apu3
    
.sign:apu3:
  <<: *sign_rom
  variables:
    PLATFORM: apu3
    
publish:apu3:
  <<: *publish_rom
  variables:
    PLATFORM: apu3

   
build:apu4:
  <<: *build_rom_apu
  variables:
    PLATFORM: apu4

.test:apu4:
  <<: *test_rom
  variables:
    PLATFORM: apu4
    
.sign:apu4:
  <<: *sign_rom
  variables:
    PLATFORM: apu4
    
publish:apu4:
  <<: *publish_rom
  variables:
    PLATFORM: apu4 

    
build:apu5:
  <<: *build_rom_apu
  variables:
    PLATFORM: apu5

.test:apu5:
  <<: *test_rom
  variables:
    PLATFORM: apu5
    
.sign:apu5:
  <<: *sign_rom
  variables:
    PLATFORM: apu5
    
publish:apu5:
  <<: *publish_rom
  variables:
    PLATFORM: apu5    
